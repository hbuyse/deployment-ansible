---
# tasks file for nvim
- name: "Neovim | Install program from package manager"
  become: true
  ansible.builtin.package:
    name:
      - neovim
    state: present
  when: ansible_os_family != "Debian"
  tags:
    - neovim
    - nvim

- name: "Neovim | Install program from static binary"
  when: ansible_os_family == "Debian"
  tags:
    - neovim
    - nvim
  block:
    - name: "Neovim | Get latest version number"
      register: latest_json
      ansible.builtin.uri:
        url: "https://api.github.com/repos/neovim/neovim/releases/latest"
        method: GET
        return_content: true
        status_code: 200
        body_format: json

    - name: "Neovim | Set facts"
      ansible.builtin.set_fact:
        nvim_latest_version: "{{ latest_json.json.tag_name[1:] }}"

    - name: "Neovim | Install program from static binary [v{{ nvim_latest_version }}]"
      become: true
      ansible.builtin.unarchive:
        src: "https://github.com/neovim/neovim/releases/download/v{{ nvim_latest_version }}/nvim-linux-{{ ansible_architecture }}.tar.gz"
        dest: "/usr/local"
        remote_src: true
        extra_opts:
          - --strip-components=1

- name: "Neovim | Ensure configuration folder exists"
  ansible.builtin.file:
    mode: "0755"
    path: "{{ nvim_config_dir }}"
    state: directory
  tags:
    - neovim
    - nvim

- name: "Neovim | Copy static files in configuration directory"
  ansible.builtin.copy:
    src: "{{ role_path }}/files/"
    dest: "{{ nvim_config_dir }}"
    mode: "0644"
  tags:
    - neovim
    - nvim

- name: "Neovim | Copy templates files in configuration directory"
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: "{{ nvim_config_dir }}/{{ item }}"
    mode: "0644"
  loop:
    - "lua/hbuyse/plugins/formatter.lua"
    - "lua/hbuyse/init.lua"
  tags:
    - neovim
    - nvim

- name: "Neovim | Sync plugins"
  ansible.builtin.command: nvim --headless "+Lazy! sync" +qa
  changed_when: false
  tags:
    - neovim
    - nvim
